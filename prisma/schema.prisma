generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  @@map("sessions")
}

model User {
  id                     String     @id @default(cuid())
  createdAt              DateTime   @default(now()) @map("created_at")
  updatedAt              DateTime   @default(now()) @map("updated_at")
  name                   String?
  email                  String?    @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?    @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?    @unique @map("stripe_subscription_id")
  stripePriceId          String?    @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map("stripe_current_period_end")
  password               String
  userConfigId           String     @unique
  userConfig             UserConfig @relation(fields: [userConfigId], references: [id])
  Videos                 Video[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Config {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @default(now()) @map("updated_at")
  title           String
  videoSplitRatio Decimal
  fontName        String
  fontSize        Int
  fontWeight      String
  nouns           Boolean      @default(true)
  sentenceLength  Int
  sentenceCasing  Casing       @default(WORDS)
  textPosition    Position     @default(TOP)
  VideoConfig     VideoConfig?
  UserConfig      UserConfig?

  @@map("templates")
}

model VideoConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videoId   String
  configId  String   @unique
  video     Video?
  config    Config   @relation(fields: [configId], references: [id])
}

model UserConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  configId  String   @unique
  user      User?
  config    Config   @relation(fields: [configId], references: [id])
}

model Video {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  bucket      String
  key         String
  type        VIDEO_TYPE
  configId    String      @unique
  status      VideoStatus @default(DRAFT)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoConfig VideoConfig @relation(fields: [configId], references: [id])

  @@index([userId])
}

enum VIDEO_TYPE {
  PRIMARY
  SECONDARY
}

enum Position {
  TOP
  CENTER
  BOTTOM
}

enum VideoStatus {
  DRAFT
  PUBLISHED
  PROGRESS
  FAILED
}

enum Casing {
  LOWER
  UPPER
  SENTENCES
  WORDS
}
